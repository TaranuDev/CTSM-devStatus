{"/":{"title":"README","content":"\nDear reader,\n\nThis is a documentation which tries to capture the progress done in the representation of human water interface in the Community Earth System Model (CESM). \nIt may contain contain an overview of the previous development and existing features in CESM; some information and references on other models and how they approached this problem; but the main focus is describing the current model development done by Ioan Sabin Taranu during his PhD project (2021-2025).\n\nThis documentation is a work in progress, as the project is still not finished. Therefore the content is subject to change as we will advance with the source code development, testing and validation.\n\nYou can start reading the documentation from the [Model Development](obsidian/Model_Development_for_Sectoral_Water_Usage.md), which will guide you through the development process.\n\nBest regards,\\\nSabin Taranu\n\nPhD Student at Vrije Universiteit Brussels,\\\ninventWater Project\n\n*Supervisors: Prof. Dr. Wim Thiery, Prof. Dr. Yoshihide Wada, Dr. Ting Tang, Dr. David Lawrence*\n\n**This project has received funding from the\nEuropean Union’s Horizon 2020 research\nand innovation programme under the\nMarie Skłodowska-Curie grant agreement No. 956623**\n\n\n![[flag_eu.png]]\n\n","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/How+to/Use+callouts#Types).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Ioan Sabin Taranu\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nenableSemanticSearch: false\noperandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"Human Water Interface in CTSM\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/SabinTaranu\n  - link_name: Github\n    link: https://github.com/TaranuDev\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\nYou can also use wikilinks if that is what you are more comfortable with!\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2022-10-19T09:58:28.412416854Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Create an Operand Account on [their website](https://operand.ai/).\n2. Go to Dashboard \u003e Settings \u003e Integrations.\n3. Follow the steps to setup the GitHub integration. Operand needs access to GitHub in order to index your digital garden properly!\n4. Head over to Dashboard \u003e Objects and press `(Cmd + K)` to open the omnibar and select 'Create Collection'.\n\t1. Set the 'Collection Label' to something that will help you remember it.\n\t2. You can leave the 'Parent Collection' field empty.\n5. Click into your newly made Collection.\n\t1. Press the 'share' button that looks like three dots connected by lines.\n\t2. Set the 'Interface Type' to `object-search` and click 'Create'.\n\t3. This will bring you to a new page with a search bar. Ignore this for now.\n6. Go back to Dashboard \u003e Settings \u003e API Keys and find your Quartz-specific Operand API key under 'Other keys'.\n\t1. Copy the key (which looks something like `0e733a7f-9b9c-48c6-9691-b54fa1c8b910`).\n\t2. Open `data/config.yaml`. Set `enableSemanticSearch` to `true` and `operandApiKey` to your copied key.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: true\noperandApiKey: \"0e733a7f-9b9c-48c6-9691-b54fa1c8b910\"\n```\n7. Make a commit and push your changes to GitHub. See the [[notes/hosting|hosting]] page if you haven't done this already.\n\t1. This step is *required* for Operand to be able to properly index your content. \n\t2. Head over to Dashboard \u003e Objects and select the collection that you made earlier\n8. Press `(Cmd + K)` to open the omnibar again and select 'Create GitHub Repo'\n\t1. Set the 'Repository Label' to `Quartz`\n\t2. Set the 'Repository Owner' to your GitHub username\n\t3. Set the 'Repository Ref' to `master`\n\t4. Set the 'Repository Name' to the name of your repository (usually just `quartz` if you forked the repository without changing the name)\n\t5. Leave 'Root Path' and 'Root URL' empty\n9. Wait for your repository to index and enjoy natural language search in Quartz! Operand refreshes the index every 2h so all you need to do is just push to GitHub to update the contents in the search.","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CMEPS/Changes_Tracker_CMEPS":{"title":"Changes Tracker CMEPS","content":"\n## Here we track all modifications done to the CMEPS in order to support sectoral water usage\n\nThe GitHub fork can be accessed [here](https://github.com/TaranuDev/CMEPS).\\\nChanges are done directly to the master branch (look for last tag with `sectorwater` in it).\n\n\n\n### List of modifications:\n- [CMEPS/mediator/med_phases_prep_rof_mod.F90](Documentation/CMEPS/med_phases_prep_rof_mod.md)\n- [CMEPS/mediator/fd_cesm.yaml](Documentation/CMEPS/fd_cesm.md)\n- [CMEPS/mediator/esmFldsExchange_cesm_mod.F90](Documentation/CMEPS/esmFldsExchange_cesm_mod.md)\n- [CMEPS/mediator/med_diag_mod.F90](Documentation/CMEPS/med_diag_mod.md)","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CMEPS/esmFldsExchange_cesm_mod":{"title":"esmFldsExchange_cesm_mod.F90","content":"\n## Overview:\nIn this module we have defined the `esmFldsExchange_cesm` subroutine.\n\nTo support sectoral water usage we add the import fields for each sector withdrawal and return flow which are to be transferred from the `land` to `routing` component.\n\n## Code:\n```fortran\n...\n! example of code for domestic withdrawal:\n\n    ! ---------------------------------------------------------------------\n    ! to rof: domestic withdrawal flux from land (withdrawal from rivers)\n    ! ---------------------------------------------------------------------\n    if (phase == 'advertise') then\n       call addfld(fldListFr(complnd)%flds, 'Flrl_dom_withd')\n       call addfld(fldListTo(comprof)%flds, 'Flrl_dom_withd')\n    else\n       if ( fldchk(is_local%wrap%FBImp(complnd, complnd), 'Flrl_dom_withd', rc=rc) .and. \u0026\n            fldchk(is_local%wrap%FBExp(comprof)         , 'Flrl_dom_withd', rc=rc)) then\n          call addmap(fldListFr(complnd)%flds, 'Flrl_dom_withd', comprof, mapconsf, 'lfrac', lnd2rof_map)\n          call addmrg(fldListTo(comprof)%flds, 'Flrl_dom_withd', \u0026\n               mrg_from=complnd, mrg_fld='Flrl_dom_withd', mrg_type='copy_with_weights', mrg_fracname='lfrac')\n       end if\n    end if\n...\n```","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CMEPS/fd_cesm":{"title":"fd_cesm.yaml","content":"\n## Overview:\nHere we simply add to the mediator field dictionary new fields corresponding to the withdrawal and return flow fluxes.\n\n## Code:\n```perl\n# example of added field:\n- standard_name: Flrl_dom_withd\n  canonical_units: kg m-2 s-1\n  description: land export to river\n```","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CMEPS/med_diag_mod":{"title":"med_diag_mod.F90","content":"\n\nHere are defined the `med_phases_diag_lnd()` and `med_phases_diag_rof()` subroutines which perform global diagnostics of input/output fluxes.\n\nTo support sectoral water usage, the withdrawal and return fluxes for each sector are added to the diagnostics from both land and rof side.\n\nThe sign of fluxes should be carefully accounted for. Negative sign mean that the system is losing water, while positive sign means it is gaining water.\n\n## Code:\n```fortran\n! Example of code for the land diagnostic:\n\nsubroutine med_phases_diag_lnd( gcomp, rc)\n...\ncall diag_lnd(is_local%wrap%FBImp(complnd,complnd), 'Flrl_dom_withd' , f_watr_roff, ic,\u0026\n         areas, lfrac, budget_local, minus=.true., rc=rc)\n\t\t ! for withdrawal minus sign (as system lose water)\nif (ChkErr(rc,__LINE__,u_FILE_u)) return\n\ncall diag_lnd(is_local%wrap%FBImp(complnd,complnd), 'Flrl_dom_rf' , f_watr_roff, ic,\u0026\n         areas, lfrac, budget_local, minus=.false., rc=rc)\nif (ChkErr(rc,__LINE__,u_FILE_u)) return\n\t\t  ! for return flow plus sign (as system gains water)\n...\nend subroutine med_phases_diag_lnd( gcomp, rc)\n```","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CMEPS/med_phases_prep_rof_mod":{"title":"med_phases_prep_rof_mod.F90","content":"\n## Overview:\nIt is here that we accumulate the import land fields which are later distributed to other model components.\n\nTo support sectoral water usage several new fields are added and a new subroutine `med_phases_prep_rof_sectorwater` is created inspired from `med_phases_prep_rof_irrig`. Its role is to remap, in a safe way (proofing against negative `volr`), the fields from `land component` to the `routing component`. \n\n## Code:\n```fortran\nmodule med_phases_prep_rof_mod\n\n  !-----------------------------------------------------------------------------\n  ! Create rof export fields\n  ! - accumulate import lnd fields on the land grid that are sent to rof\n  !   - done in med_phases_prep_rof_accum\n  ! - time avergage accumulated import lnd fields on lnd grid when necessary and\n  !   then map the time averaged accumulated lnd fields to the rof grid\n  !   and then merge the mapped lnd fields to create FBExp(comprof)\n  !   - done in med_phases_prep_rof_avg\n  !-----------------------------------------------------------------------------\n\n...\n  ! new subroutine\n  private :: med_phases_prep_rof_sectorwater\n\n\n  subroutine med_phases_prep_rof_sectorwater(gcomp, rc)\n\n   !---------------------------------------------------------------\n   ! Description\n   ! Do custom mapping for the sectoral water fluxes, from land -\u003e rof.\n   !\n   ! The basic idea is that we want to pull/add the fluxes out of ROF cells proportionally to\n   ! the river volume (volr) in each cell. This is important in cases where the various\n   ! ROF cells overlapping a CTSM cell have very different volr: If we didn't do this\n   ! volr-normalized remapping, we'd try to extract the same amount of water from each\n   ! of the ROF cells, which would be more likely to have withdrawals exceeding\n   ! available volr.\n   !\n   ! (Both RTM and MOSART have code to handle excess withdrawals by pulling the excess\n   ! directly out of the ocean. We'd like to avoid resorting to this if possible.\n   !\n   ! This mapping works by:\n   ! (1) Normalizing the land's sectoral water fluxes by volr\n   ! (2) Mapping this volr-normalized flux to the rof grid\n   ! (3) Converting the mapped, volr-normalized flux back to a normal\n   !     (non-volr-normalized) flux on the rof grid.\n   !---------------------------------------------------------------\n\n   ! input/output variables\n   ... ! here we change nothing \n   \n   ! local variables\n   ... ! here we add ESMF_Field variables correponding to sectoral withdrawal and return flow fluxes\n   ! as well as pointers to the ESMF_Field for each sector corresponding \n   ! to the land and routing normalized withdrawals and return flows,\n   ! as well as flux and river volume \n\n   !---------------------------------------\n   ! Get the internal state\n   !---------------------------------------\n\t... ! change nothing\n\n   ! ------------------------------------------------------------------------\n   ! Initialize module field bundles if not already initialized\n   ! ------------------------------------------------------------------------\n\n   ! Check if the required fields are created and if not\n   ... \n   ! Create and get the fields in source and destination field bundles\n   ...\n   \n  \n   ! ------------------------------------------------------------------------\n   ! 1) Create volr_l: Adjust volr_r, and map it to the land grid\n   ! ------------------------------------------------------------------------\n\n   ! Treat any rof point with volr \u003c 0 as if it had volr = 0. Negative volr values can\n   ! arise in RTM. This fix is needed to avoid mapping negative sector waterfluxes to those\n   ! cells: while conservative, this would be unphysical (it would mean that sector water fluxes\n   ! actually adds water to those cells).\n\n   ! Create volr_r \n   ... ! change nothing here\n\n   ! Map volr_r to volr_l (rof-\u003elnd) using conservative mapping without any fractional weighting\n   ... ! change nothing here\n   \n   ! Get volr_l\n   ... ! change nothing here\n\n   ! ------------------------------------------------------------------------\n   ! (2) Determine sector water usage from land on land grid normalized by volr_l\n   ! ------------------------------------------------------------------------\n\n   ! In order to avoid possible divide by 0, as well as to handle non-sensical negative\n   ! volr on the land grid, we divide the land's sector water flux into two separate flux\n   ! components:\n   ! - a component where we have positive volr on the land grid (put in\n   !   sectorX_withd/rf_normalized_l, which is mapped using volr-normalization)\n   ! - a component where we have zero or negative volr on the land\n   !   grid (put in sectorX_withd/rf_volr0_l, which is mapped as a standard flux).\n   ! We then remap both of these components to the rof grid, and then\n   ! finally add the two components to determine the total sector water\n   ! flux on the rof grid.\n\n   ! First extract accumulated sector water flux from land (both withdrawal and return flow)\n  ...\n\n   ! Fill in values for sectorX_withd/rf_normalized_l and sectorX_withd/rf_volr0_l\n ...\n \n ! Loop over each volr gridcell from the land component\n \t  ! if volr in specified grid \u003e 0 (positive) then\n      \t\t! directly normalize withdrawal and return flow by the volr_l(l)\n      ! else\n         \t! treat withdrawal and return flow as normal fluxes \n\t\t\t! (no normalization)\n ! Finish loop over volr gridcell from the land component\n \n ! ------------------------------------------------------------------------\n ! (3) Map normalized sector water fluxes from land to rof grid and\n !     convert to a total sector fluxes on the ROF grid\n ! ------------------------------------------------------------------------\n\n ! maping is done using the med_map_field_normalized() subroutine\n ! we are remaping the two components (one which result when volr_l(l) \u003c= 0 \n ! which is not normalized and the one when volr_l(l) \u003e 0, which is normalized)\n ...\n \n ! Convert to a total sector water flux on the ROF grid, and put this in the pre-merge FBlndAccum2rof_r\n ...\n\n ! loop over the all the routing gridcells 'r' over which we do the mapping\n \t  ! the total withdrawl and return flows are then reconstructed as \n\t  ! the sum of the normalizable and non-normalizable component\n ! end loop\n```","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CPL7/Changes_Tracker_CPL7":{"title":"Changes Tracker CPL7","content":"\n## Here we track all modifications done to the CPL7 in order to support sectoral water usage\n\nThe GitHub fork can be accessed [here](https://github.com/TaranuDev/CESM_CPL7andDataComps)\n\n\n\n### List of modifications:\n- [CPL7/driver/main/map_lnd2rof_sectorwater_mod.F90](Documentation/CPL7/map_lnd2rof_sectorwater_mod.md) `new module`\n- [CPL7/driver/main/prep_rof_mod.F90](Documentation/CPL7/prep_rof_mod.md)\n- [CPL7/driver/main/seq_diag_mct.F90](Documentation/CPL7/seq_diag_mct.md)\n- [CPL7/driver/shr/seq_flds_mod.F90](Documentation/CPL7/seq_flds_mod.md)","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CPL7/map_lnd2rof_sectorwater_mod":{"title":"map_lnd2rof_sectorwater_mod.F90","content":"\n## Overview:\nNew module created to support sectoral water usage. It is inspired from the existing module `driver/main/map_lnd2rof_irrig_mod.F90`.\n\nThis module contains routines for mapping the sectoral water fields (both withdrawal and return flow) from the LND grid onto the ROF grid.\n\nThe mapping is done for all the fluxes at the same time.\n\nThe basic idea is that we want to pull/add sectoral water fluxes out of/in ROF cells proportionally to the river volume (volr) in each cell. This is important in cases where the various ROF cells overlapping a CLM cell have very different volr.\n\nIf we didn't do this volr-normalized remapping, we'd try to extract the same amount of water from each of the ROF cells, which would be more likely to have withdrawals exceeding available volr.\n\n MOSART model have code to handle excess withdrawals, by pulling the excess directly out of the ocean, but we'd like to avoid resorting to this as much as possible.\n \n This mapping works by:\n\t 1. Normalizing the land's sector water flux by volr\n\t 2. Mapping this volr-normalized flux to the rof grid\n\t 3. Converting the mapped, volr-normalized flux back to a normal (non-volr-normalized) flux on the rof grid.\n\t \n## Code:\nIn principle it is the same code as in the [CMEPS/mediator/med_phases_prep_rof_mod.F90](Documentation/CMEPS/med_phases_prep_rof_mod.md) so we will not go in much  details here.\n\nFor the moment, it is a little bit unclear why we need two instances of same code and why [CMEPS/mediator/med_phases_prep_rof_mod.F90](Documentation/CMEPS/med_phases_prep_rof_mod.md) is not sufficient.\n\nI will need to check the calls in more details to clear this out.\n","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CPL7/prep_rof_mod":{"title":"prep_rof_mod.F90","content":"\n## Overview:\n\n\n\n## Code:\n```fortran\nmodule prep_rof_mod\n\n...\n\n! define as parameters the field names and lists, for fields that need to be treated specially (including irrigation and sectoral water withdrawal and return flows for each sector)\ncharacter(len=*), parameter :: dom_withd_flux_field = 'Flrl_dom_withd'\ncharacter(len=*), parameter :: dom_rf_flux_field = 'Flrl_dom_rf'\n...\n\n! whether the model is being run with a separate irrigation/sector water usage field\nlogical :: have_dom_field\n...\n\nsubroutine prep_rof_init(infodata, lnd_c2_rof, atm_c2_rof)\n\n!---------------------------------------------------------------\n! Description\n! Initialize module attribute vectors and all other non-mapping\n! module variables\n\n\n...\n\n! define integers to store index of specific sector water field \n! this index is used to extract the right fields from the arrays containing all fields passed through the coupler\ninteger                     :: index_dom_withd\ninteger                     :: index_dom_rf\n...\n\n\nif (rof_present) then\n  x2r_rx =\u003e component_get_x2c_cx(rof(1)) ! coupler to rof array containing all fields\n  ...\n  ! extract indices for each field of interest\n  index_dom_withd = mct_aVect_indexRA(x2r_rx, dom_withd_flux_field, perrWith='quiet')\n  index_dom_rf = mct_aVect_indexRA(x2r_rx, dom_rf_flux_field, perrWith='quiet')\n  ...\n  \n  ! assign values to the logical have_field variables for each sector\n  ! if obtained index is different from 0, then field exist =\u003e .true. and otherwise .false.\n  ...\nend if\n\n\n\nif (rof_present .and. lnd_present) then\n\n  ! maping of land field to rof (here we change nothing)\n  ...\n  \n  ! Irrigation and sectoral water usage are mapped separatly \n   call shr_string_listDiff( \u0026\n\t\tlist1 = seq_flds_l2x_fluxes_to_rof, \u0026\n\t\tlist2 = dom_withd_flux_field, \u0026\n\t\tlistout = lnd2rof_normal_fluxes)\n   ...\n  endif\n\nend if\n\n\n...\nend subroutine prep_rof_init\n\n\n\n...\n\nsubroutine prep_rof_merge(l2x_r, a2x_r, fractions_r, x2r_r, cime_model)\n\n!-----------------------------------------------------------------------\n! Description\n! Merge land rof and ice forcing for rof input\n\n\n...\n! define indeces of all fields to be merged (including for irrigation and sectoral water usage)\ninteger, save :: index_l2x_Flrl_dom_withd ! l2x means land -\u003e coupler\ninteger, save :: index_l2x_Flrl_dom_rf\n...\ninteger, save :: index_x2r_Flrl_dom_withd ! x2r means coupler -\u003e routing\ninteger, save :: index_x2r_Flrl_dom_rf\n...\n\nif (first_time) then\n  ! allocate memory for the merging array (here we change nothing)\n  ...\n  ! For each sector get the index of the corresponding sector field from the land to coupler array\n  if (have_dom_field) then\n     index_l2x_Flrl_dom_withd  = mct_aVect_indexRA(l2x_r,'Flrl_dom_withd' )\n     index_l2x_Flrl_dom_rf  = mct_aVect_indexRA(l2x_r,'Flrl_dom_rf' )\n  end if\n  ...\n  ! and same for the coupler to routing array \n  if (have_dom_field) then\n     index_x2r_Flrl_dom_withd  = mct_aVect_indexRA(x2r_r,'Flrl_dom_withd' )\n     index_x2r_Flrl_dom_rf  = mct_aVect_indexRA(x2r_r,'Flrl_dom_rf' )\n  end if\n  ...\nend if\n\ndo i = 1,lsize\n\t! Fill the array x2r based on fields already saved in l2x (including for sector water usage)\n\t...\nend do\n\n...\nend subroutine prep_rof_merge\n\n\nsubroutine prep_rof_calc_l2r_rx(fractions_lx, timer)\n! Here we added the remaping of sectoral water usage fluxes\n! using map_lnd2rof_sectorwater() subroutine\nend subroutine prep_rof_calc_l2r_rx\n\n```","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CPL7/seq_diag_mct":{"title":"seq_diag_mct.F90","content":"## Overview:\n\n## Code:\n```fortran\n! Add to the seq_diag_lnd_mct() and seq_diag_rof_mct() diagnostics subroutines the fields corresponding to the withdrawal and return flow of sectoral water usage.\n\n! This is required to make sure that no error is comitted during the exchange of information between the land and routing model.\n\n! It is important to be careful with the sign\n! For example for land to coupler budget:\nif (index_l2x_Flrl_dom_withd /= 0) then\nnf = f_wroff ; budg_dataL(nf,ic,ip) = budg_dataL(nf,ic,ip) - ca_l*l2x_l%rAttr(index_l2x_Flrl_dom_withd,n) + ca_l*l2x_l%rAttr(index_l2x_Flrl_dom_rf,n)\nend if\n\n! and for the coupler to routing budget:\nif (index_x2r_Flrl_dom_withd /= 0) then\nnf = f_wroff; budg_dataL(nf,ic,ip) = budg_dataL(nf,ic,ip) + ca_r*x2r_r%rAttr(index_x2r_Flrl_dom_withd,n) - ca_r*x2r_r%rAttr(index_x2r_Flrl_dom_rf,n)\nend if\n\n```","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CPL7/seq_flds_mod":{"title":"seq_flds_mod.F90","content":"\n## Overview:\nJust a conditional addition of sectoral water usage fluxes if `trim(cime_model) == 'cesm'`.\n\nNot sure if this is actually important.\n\n","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CTSM/BalanceCheckMod":{"title":"BalanceCheckMod.F90","content":"## Overview:\nNot done yet (only when we will add consumption water to the surface soil)","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CTSM/CLMBuildNamelist":{"title":"namelist_defaults_ctsm_tools.xml","content":"\n## Overview:\nThis script builds the namelists for CLM.\n\nTo support sectoral water usage we added two new subroutines: `setup_logic_sectorwater()` and `setup_logic_sectorwater_parameters`.","lastmodified":"2022-10-19T09:58:28.416416859Z","tags":null},"/obsidian/CTSM/Changes_Tracker_CTSM":{"title":"Changes Tracker CTSM","content":"\n## Here we track all modifications done to the MOSART in order to support sectoral water usage\n\nThe GitHub fork can be accessed [here](https://github.com/TaranuDev/CTSM)\n\n\n\n## List of modifications:\n### Namelist modifications\n- [CTSM/bld/namelist_files/namelist_definition_ctsm.xml](Documentation/CTSM/namelist_definition_ctsm.md)\n- [CTSM/bld/namelist_files/namelist_defaults_ctsm_tools.xml](Documentation/CTSM/namelist_defaults_ctsm_tools.md)\n- [CTSM/bld/namelist_files/namelist_defaults_ctsm.xml](Documentation/CTSM/namelist_defaults_ctsm.md)\n- [CTSM/bld/CLMBuildNamelist.pm](Documentation/CTSM/CLMBuildNamelist.md)\n\n### Connect all forks using corresponding repositories and tags\n- [Externals.cfg](Documentation/CTSM/Externals.md)\n\n### Changes to the main\n- [CTSM/src/main/clm_driver.F90](Documentation/CTSM/clm_driver.md)\n- [CTSM/src/main/restFileMod.F90](Documentation/CTSM/restFileMod.md)\n- [CTSM/src/main/controlMod.F90](Documentation/CTSM/controlMod.md)\n- [CTSM/src/main/clm_varpar.F90](Documentation/CTSM/clm_varpar.md)\n- [CTSM/src/main/clm_instMod.F90](Documentation/CTSM/clm_instMod.md)\n- [CTSM/src/main/clm_varctl.F90](Documentation/CTSM/clm_varctl.md)\n\n### Changes to biogeophys\n- [CTSM/src/biogeophys/SectorWaterMod.F90](Documentation/CTSM/SectorWaterMod.md) `new module`\n- [CTSM/src/biogeophys/HydrologyNoDrainageMod.F90](Documentation/CTSM/HydrologyNoDrainageMod.md)\n- [CTSM/src/biogeophys/BalanceCheckMod.F90](Documentation/CTSM/BalanceCheckMod.md)\n- [CTSM/src/biogeophys/Waterlnd2atmType.F90](Documentation/CTSM/Waterlnd2atmType.F90)\n\n\n### Changes to tools\nHere we don't go in much details. All changes to the tool are done following the instructions. And at the moment, what this does is to add to the surface data new fields corresponding to the sectoral water usage (withdrawal and consumption for each sector).\n\nOnly year 2000 is added at the moment (if we want to have transient/timeseries inputs for longer periods there are better ways to integrate the such data).\n\nThe data have monthly format, so 12 entries for year 2000.\n- [CTSM/tools/mksurfdata_map/mksurfdata.pl](Documentation/CTSM/mksurfdata.md)\n- [CTSM/tools/mksurfdata_map/src/mkfileMod.F90](Documentation/CTSM/mkfileMod.md)\n- [CTSM/tools/mksurfdata_map/src/Srcfiles](Documentation/CTSM/Srcfiles.md)\n- [CTSM/tools/mksurfdata_map/src/mkvarctl.F90](Documentation/CTSM/mkvarctl.md)\n- [CTSM/tools/mksurfdata_map/src/mksectorwaterMod.F90](Documentation/CTSM/mksectorwaterMod.md) `new module`\n- [CTSM/tools/mksurfdata_map/src/mksurfdat.F90](Documentation/CTSM/mksurfdat.md)\n- [CTSM/tools/mksurfdata_map/mksurfdata_map.namelist](Documentation/CTSM/mksurfdata_map.md)\n","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/Externals":{"title":"Externals.cfg","content":"\n## Overview:\nTo support sectoral water usage, changes were made to several components (see [CTSM/Model Development for Sectoral Water Usage](Documentation/Model_Development_for_Sectoral_Water_Usage.md)).\n\nTherefore to be able to run simulations supporting sectoral water usage it is required to use the right version of `CMEPS`, `CPL7` and `MOSART`.\n\nWe change the Externals.cfg, so that it point to the TaranuDev github where the updated forks of the before-mentioned components are available. This way the `./manage_externals/checkout_externals` command will install the components which support sectoral water usage.  ","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/HydrologyNoDrainageMod":{"title":"HydrologyNoDrainageMod.F90","content":"\n## Overview:\nThis module contains the main subroutine to execute the calculation of soil and snow hydrology.\n\nBut in addition to this here is also defined the `CalcAndWithdrawIrrigationFluxes()` subroutine which do the calculation of irrigation withdrawal fluxes and perform the withdrawal (including from groundwater).\n\nThis is why it is here that we defined the `CalcAndWithdrawSectorWaterFluxes()` subroutine, with a similar objective:\n- compute current day withdrawal, consumption and return flow;\n- apply these fluxes;\n- update the status of `water_inst` variables which should be transferred to the `routing component`;\n\n\n## Code:\n```fortran\nsubroutine CalcAndWithdrawSectorWaterFluxes(bounds, soilhydrology_inst, sectorwater_inst, water_inst, volr, rof_prognostic)\n!\n! !DESCRIPTION:\n! Calculates sector water withdrawal fluxes and withdraws from groundwater\n!\n! !USES:\n! use SoilHydrologyMod       , only : WithdrawGroundwaterSectorWater\nuse clm_time_manager       , only : is_beg_curr_day\n!\n! !ARGUMENTS:\ninteger  :: g  ! gridcell index\ntype(bounds_type)              , intent(in)    :: bounds\ntype(soilhydrology_type)       , intent(in)    :: soilhydrology_inst\ntype(sectorwater_type)         , intent(inout) :: sectorwater_inst\ntype(water_type)               , intent(inout) :: water_inst\n\n! river water volume (m3) (ignored if rof_prognostic is .false.)\nreal(r8), intent(in) :: volr( bounds%begg: )\n\n! whether we're running with a prognostic ROF component; this is needed to determine\n! whether we can limit irrigation based on river volume.\nlogical, intent(in) :: rof_prognostic\n\n! !LOCAL VARIABLES:\ninteger :: i  ! tracer index\n\ncharacter(len=*), parameter :: subname = 'CalcAndWithdrawSectorWaterFluxes'\n!-----------------------------------------------------------------------\n\n! Read withdrawal and consumption data from input surfdata\n! Compute the withdrawal, consumption and return flow (expected and actual)\n! To limit computation time, call this subroutine only once a day\nif (is_beg_curr_day()) then\n   call sectorwater_inst%CalcSectorWaterNeeded(bounds, volr, rof_prognostic)\nendif\n\n! This part is not elegant at all and will be replaced later\ndo g = bounds%begg, bounds%endg\n   water_inst%waterlnd2atmbulk_inst%qdom_withd_grc(g) = sectorwater_inst%dom_withd_actual_grc(g)\n   water_inst%waterlnd2atmbulk_inst%qdom_rf_grc(g) = sectorwater_inst%dom_rf_actual_grc(g)\n\n   water_inst%waterlnd2atmbulk_inst%qliv_withd_grc(g) = sectorwater_inst%liv_withd_actual_grc(g)\n   water_inst%waterlnd2atmbulk_inst%qliv_rf_grc(g) = sectorwater_inst%liv_rf_actual_grc(g)\n\n   water_inst%waterlnd2atmbulk_inst%qelec_withd_grc(g) = sectorwater_inst%elec_withd_actual_grc(g)\n   water_inst%waterlnd2atmbulk_inst%qelec_rf_grc(g) = sectorwater_inst%elec_rf_actual_grc(g)\n\n   water_inst%waterlnd2atmbulk_inst%qmfc_withd_grc(g) = sectorwater_inst%mfc_withd_actual_grc(g)\n   water_inst%waterlnd2atmbulk_inst%qmfc_rf_grc(g) = sectorwater_inst%mfc_rf_actual_grc(g)\n\n   water_inst%waterlnd2atmbulk_inst%qmin_withd_grc(g) = sectorwater_inst%min_withd_actual_grc(g)\n   water_inst%waterlnd2atmbulk_inst%qmin_rf_grc(g) = sectorwater_inst%min_rf_actual_grc(g)\n\nend do\n\nend subroutine CalcAndWithdrawSectorWaterFluxes\n```\n\n\n## Things which may require change:\nAt the moment, the consumed water for each sector is not used in any way. Which means that the system is constantly loosing water as the withdrawal \u003e return flow. In the future we plan to add the consumed water to the surface soil (only for natural vegetation and pervious roads columns). See more details [CTSM/src/main/clm_driver.F90](Documentation/CTSM/clm_driver.md).\n\nIn addition to this when we will apply the consumption water to the surface soil, we will need to account this in the `column` and `gridcell` balance check [CTSM/src/biogeophys/BalanceCheckMod.F90](Documentation/CTSM/BalanceCheckMod.md).\n","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/SectorWaterMod":{"title":"SectorWaterMod.F90","content":"\n## Overview:\nThis new module is largely inspired from existing module `src/biogeophys/IrrigationMod.F90`.\n\n## Code:\n```fortran\nmodule SectorWaterMod\n\n#include \"shr_assert.h\"\n\n! specify all module/subroutines used\n! here I will need to update the list by taking out things I didn't really used\n...\n\n  \n\n!PUBLIC TYPES:\n! Define sector water usage module parameters\ntype, public :: sectorwater_params_type\n\n\t! Time of day to start domestic and livestock water use, seconds (0 = midnight).\n\t! We start satisfying the demand in the time step FOLLOWING this time,\n\tinteger :: dom_and_liv_start_time\n\n\t! Time of day to start industrial (thermoelectric, manufacturing and mining) water use, seconds (0 = midnight).\n\t! We start satisfying the demand in the time step FOLLOWING this time,\n\tinteger :: ind_start_time\n\n\t! Legth in seconds other which domestic and livestock water demand is satisfied.\n\t! Actual time may differ if this is not a multiple of dtime.\n\t! SectorWater module won't work properly if dtime \u003e secsperday.\n\tinteger :: dom_and_liv_length\n\n\t! Legth in seconds other which industrial water demand is satisfied.\n\tinteger :: ind_length\n\n\t! Threshold for river water volume below which sectorwater usage is \n\t! shut off, if limit_sectorwater is .true. (fraction of available river water). \n\t! A threshold of 0 means all river water can be used; a threshold of 0.1 means 90% of the river volume can be used;\n\treal(r8) :: sectorwater_river_volume_threshold\n\n\t! Whether sectorwater usage is limited based on river storage.\n\t! This only applies if ROF is enabled \n\t! (i.e., rof_prognostic is .true.) - otherwise we don't limit \n\t! sectorwater usage, regardless of the value of this flag.\n\tlogical :: limit_sectorwater_if_rof_enabled\n\n\t! use groundwater supply for sectorwater usage \n\t! (in addition to surface water)\n\tlogical :: use_groundwater_sectorwater\nend type sectorwater_params_type\n\n  \n  \n! Define the sectorwater_type to store dynamical quantities related to sectoral\n! water usage, as well as the required procedures  \ntype, public :: sectorwater_type\n\n\ttype(sectorwater_params_type) :: params\n\n\tinteger :: dtime ! land model time step (sec)\n\n\tinteger :: dom_and_liv_nsteps_per_day ! number of time steps per day in which we satisfy domestic and livestock demand\n\n\tinteger :: ind_nsteps_per_day ! number of time steps per day in which we satisfy industrial demand (thermoelectric, manufacturing and mining)\n\n\t! Private data members; time-varying:\n\t! naming: dom = domestic, liv = livestock, elec = thermoelectric, \n\t! mfc = manufacturing, min = mining\n\t! naming: withd = withdrawal, cons = consumption, rf = return flow\n\n\n\n\treal(r8), pointer :: input_mon_dom_withd_grc (:) ! input expected withdrawal for current month\n\n\treal(r8), pointer :: input_mon_dom_cons_grc (:) ! input expected consumption for current month\n\n\treal(r8), pointer :: dom_withd_grc (:) ! expected withdrawal flux for the day [mm/s]\n\n\treal(r8), pointer :: dom_cons_grc (:) ! expected consumption flux for the day [mm/s]\n\n\treal(r8), pointer :: dom_withd_actual_grc (:) ! actual withdrawal flux for the day [mm/s]\n\n\treal(r8), pointer :: dom_cons_actual_grc (:) ! actual consumption flux for the day [mm/s]\n\n\treal(r8), pointer :: dom_rf_actual_grc (:) ! actual return flow flux for the day [mm/s]\n\n\t! define same quantities for other sectors\n\t...\n\n\tinteger , pointer :: n_dom_and_liv_steps_left_grc (:) ! number of time steps for which we still need to satisfy domestic and livestock demand (if 0, ignore)\n\n\tinteger , pointer :: n_ind_steps_left_grc (:) ! number of time steps for which we still need to satisfy industrial demand (if 0, ignore)\n\n\tcontains\n\n\t! Public routines\n\tprocedure, public :: Init =\u003e SectorWaterInit\n\t! procedure, public :: Restart\n\tprocedure, public :: ReadSectorWaterData\n\t! procedure, public :: CalcSectorWaterFluxes\n\tprocedure, public :: CalcSectorWaterNeeded\n\tprocedure, public :: Clean =\u003e SectorWaterClean ! deallocate memory\n\n\n\t! Private routines\n\tprocedure, private :: ReadNamelist\n\tprocedure, private :: CheckNamelistValidity ! Check for validity of input parameters\n\tprocedure, private :: InitAllocate =\u003e SectorWaterInitAllocate\n\tprocedure, private :: InitHistory =\u003e SectorWaterInitHistory\n\tprocedure, private :: InitCold =\u003e SectorWaterInitCold\n\tprocedure, private :: CalcSectorDemandVolrLimited ! calculate demand limited by river volume for each patch\n\nend type sectorwater_type\n\n  \n\ninterface sectorwater_params_type\n\nmodule procedure sectorwater_params_constructor\n\nend interface sectorwater_params_type\n\n  \n\nreal(r8), parameter :: m3_over_km2_to_mm = 1.e-3_r8\n\ncharacter(len=*), parameter, private :: sourcefile = \u0026\n\n__FILE__\n\n\ncontains\n\n  \n\n! ========================================================================\n\n! Constructors\n\n! ========================================================================\nfunction sectorwater_params_constructor(dom_and_liv_start_time, ind_start_time, \u0026\ndom_and_liv_length, ind_length, sectorwater_river_volume_threshold, \u0026\nlimit_sectorwater_if_rof_enabled, use_groundwater_sectorwater) \u0026\nresult(this)\n\t! !DESCRIPTION:\n\n\t! Create an sectorwater_params instance\n\t\n\t! !ARGUMENTS:\n\ttype(sectorwater_params_type) :: this ! function result\n\n\tinteger , intent(in) :: dom_and_liv_start_time\n\n\tinteger , intent(in) :: ind_start_time\n\n\tinteger , intent(in) :: dom_and_liv_length\n\n\tinteger , intent(in) :: ind_length\n\n\treal(r8), intent(in) :: sectorwater_river_volume_threshold\n\n\tlogical , intent(in) :: limit_sectorwater_if_rof_enabled\n\n\tlogical , intent(in) :: use_groundwater_sectorwater\n\n\t! !LOCAL VARIABLES:\n\n\tcharacter(len=*), parameter :: subname = 'sectorwater_params_constructor'\n\n\t!-----------------------------------------------------------------------\n\n\tthis%dom_and_liv_start_time = dom_and_liv_start_time\n\n\tthis%ind_start_time = ind_start_time\n\n\tthis%dom_and_liv_length = dom_and_liv_length\n\n\tthis%ind_length = ind_length\n\n\tthis%sectorwater_river_volume_threshold = sectorwater_river_volume_threshold\n\n\tthis%limit_sectorwater_if_rof_enabled = limit_sectorwater_if_rof_enabled\n\n\tthis%use_groundwater_sectorwater = use_groundwater_sectorwater\n\t\nend function sectorwater_params_constructor\n\n  \n\n! ========================================================================\n\n! Infrastructure routines (initialization, restart, etc.)\n\n! ========================================================================\nsubroutine SectorWaterInit(this, bounds, NLFilename, use_aquifer_layer)\n\n\tclass(sectorwater_type) , intent(inout) :: this\n\n\ttype(bounds_type) , intent(in) :: bounds\n\n\tcharacter(len=*) , intent(in) :: NLFilename ! Namelist filename\n\n\tlogical , intent(in) :: use_aquifer_layer\n\n\tcall this%ReadNamelist(NLFilename, use_aquifer_layer)\n\n\tcall this%InitAllocate(bounds) ! whether an aquifer layer is used in this run\n\n\tcall this%InitHistory(bounds)\n\n\tcall this%InitCold(bounds)\n\nend subroutine SectorWaterInit\n\n  \n\n!-----------------------------------------------------------------------\nsubroutine ReadNamelist(this, NLFilename, use_aquifer_layer)\n\t! !DESCRIPTION:\n\t! Read the sectorwater namelist\n\t! !USES:\n\t...\n\t! !ARGUMENTS:\n\n\tclass(sectorwater_type) , intent(inout) :: this\n\tcharacter(len=*), intent(in) :: NLFilename ! Namelist filename\n\tlogical, intent(in) :: use_aquifer_layer ! whether an aquifer layer is used in this run\n\n\t! !LOCAL VARIABLES:\n\t! variables from sectorwater_params_type\n\tinteger :: dom_and_liv_start_time\n\tinteger :: ind_start_time\n\tinteger :: dom_and_liv_length\n\tinteger :: ind_length\n\treal(r8) :: sectorwater_river_volume_threshold\n\tlogical :: limit_sectorwater_if_rof_enabled\n\tlogical :: use_groundwater_sectorwater\n\n\n\n\tinteger :: ierr ! error code\n\tinteger :: unitn ! unit for namelist file\n\tcharacter(len=*), parameter :: nmlname = 'sectorwater_inparm'\n\tcharacter(len=*), parameter :: subname = 'ReadNamelist'\n\n\t!-----------------------------------------------------------------------\n\n\n\n\tnamelist /sectorwater_inparm/ dom_and_liv_start_time, ind_start_time, dom_and_liv_length, \u0026\n\tind_length, sectorwater_river_volume_threshold, limit_sectorwater_if_rof_enabled, \u0026\n\tuse_groundwater_sectorwater\n\n\t! Initialize options to garbage defaults, forcing all to be specified\n\t! explicitly in order to get reasonable results\n\tdom_and_liv_start_time = 0\n\tind_start_time = 0\n\tdom_and_liv_length = 0\n\tind_length = 0\n\tsectorwater_river_volume_threshold = nan\n\tlimit_sectorwater_if_rof_enabled = .false.\n\tuse_groundwater_sectorwater = .false.\n\n\n\t! Read the Namelist and fill the sectorwater_inparm namelist variables\n\t...\n\n\n\t! MPI_BCAST all the sectorwater_params_type variables values to \n\t! all processes\n\t...\n\t\n\t! Update the sectorwater_type params with the values from namelist file\n\tthis%params = sectorwater_params_type( \u0026\n\n\tdom_and_liv_start_time = dom_and_liv_start_time, \u0026\n\n\tind_start_time = ind_start_time, \u0026\n\n\tdom_and_liv_length = dom_and_liv_length, \u0026\n\n\tind_length = ind_length, \u0026\n\n\tsectorwater_river_volume_threshold = sectorwater_river_volume_threshold, \u0026\n\n\tlimit_sectorwater_if_rof_enabled = limit_sectorwater_if_rof_enabled, \u0026\n\n\tuse_groundwater_sectorwater = use_groundwater_sectorwater)\n\n\n\t! Write to the log file the parameters values obtained from namelist file\n\t! Later log files can be checked to confirm that the right values were used\n\t! Here we also call the CheckNamelistValidity(use_aquifer_layer) subroutine\n\t...\n\t\nend subroutine ReadNamelist\n\n!-----------------------------------------------------------------------\n\nsubroutine CheckNamelistValidity(this, use_aquifer_layer)\n\t! !DESCRIPTION:\n\n\t! Check for validity of input parameters.\n\t! Assumes that the inputs have already been packed into 'this%params'.\n\t! Only needs to be called by the master task, since parameters are the same \n\t! for all tasks.\n\n\t! !ARGUMENTS:\n\tclass(sectorwater_type), intent(in) :: this\n\tlogical, intent(in) :: use_aquifer_layer ! whether an aquifer layer is used in this run\n\n\t! !LOCAL VARIABLES:\n\tcharacter(len=*), parameter :: subname = 'CheckNamelistValidity'\n\n\t!-----------------------------------------------------------------------\n\t! Use associate to access the this%params% variables with shortcuts\n\t...\n\n\t! Use if statements to check if params values are in admissible values range\n\t...  \n\nend subroutine CheckNamelistValidity\n\n!-----------------------------------------------------------------------\n\nsubroutine SectorWaterInitAllocate(this, bounds)\n\t! !DESCRIPTION:\n\t! Initialize sector water data structure\n\n\t! !USES:\n\t...\n\n\t! !ARGUMENTS:\n\tclass(sectorwater_type) , intent(inout) :: this\n\ttype(bounds_type) , intent(in) :: bounds\n\n\t! !LOCAL VARIABLES:\n\tinteger :: begg, endg ! bounds limits\n\n\tcharacter(len=*), parameter :: subname = 'InitAllocate'\n\n\t!-----------------------------------------------------------------------\n\tbegg = bounds%begg; endg= bounds%endg\n\n\n\t! Allocate memory for variables of sectorwater_type in the limits of the \n\t! clumps bounds (+ give nan as default values)\n\tallocate(this%input_mon_dom_withd_grc (begg:endg)) ; this%input_mon_dom_withd_grc (:) = nan\n\tallocate(this%input_mon_dom_cons_grc (begg:endg)) ; this%input_mon_dom_cons_grc (:) = nan\n\tallocate(this%dom_withd_grc (begg:endg)) ; this%dom_withd_grc (:) = nan\n\tallocate(this%dom_cons_grc (begg:endg)) ; this%dom_cons_grc (:) = nan\n\tallocate(this%dom_withd_actual_grc (begg:endg)) ; this%dom_withd_actual_grc (:) = nan\n\tallocate(this%dom_cons_actual_grc (begg:endg)) ; this%dom_cons_actual_grc (:) = nan\n\tallocate(this%dom_rf_actual_grc (begg:endg)) ; this%dom_rf_actual_grc (:) = nan\n\n\t! Do the same for other sectors\n\t...\n\t\nend subroutine SectorWaterInitAllocate\n\n!-----------------------------------------------------------------------\n\nsubroutine SectorWaterInitHistory(this, bounds)\n\t! !DESCRIPTION:\n\t! Initialize sectoral water use history fields\n\n\t! !USES:\n\t...\n\n\t! !ARGUMENTS:\n\tclass(sectorWater_type) , intent(inout) :: this\n\ttype(bounds_type) , intent(in) :: bounds\n\n\t! !LOCAL VARIABLES:\n\tinteger :: begg, endg\n\tcharacter(len=*), parameter :: subname = 'InitHistory'\n\t!-----------------------------------------------------------------------\n\tbegg = bounds%begg; endg= bounds%endg\n\n\n\t! Add actual withdrawal as history fields for outputs\n\t! Maybe later we can add other fields too\n\t! But for the first tests, this is enough\n\tthis%dom_withd_actual_grc(begg:endg) = spval\n\tcall hist_addfld1d (fname='DOM_ACTUAL_WITHD', units='mm/s', \u0026\n\tavgflag='A', long_name='domestic actual withdrawal flux', \u0026\n\tptr_patch=this%dom_withd_actual_grc, default='inactive')\n\n\t! Do the same for other sectors\n\t...\n\nend subroutine SectorWaterInitHistory\n\n  \n\n!-----------------------------------------------------------------------\n\nsubroutine SectorWaterInitCold(this, bounds)\n\t! !DESCRIPTION:\n\t! Do cold-start initialization for sector water data structure\n\n\t! !ARGUMENTS:\n\tclass(sectorwater_type) , intent(inout) :: this\n\ttype(bounds_type) , intent(in) :: bounds\n\tcharacter(len=*), parameter :: subname = 'InitCold'\n\t!-----------------------------------------------------------------------\n\n\t! Initialize the sectorwater_type variables \n\tthis%dtime = get_step_size()\n\tthis%ind_nsteps_per_day = 0._r8\n\tthis%dom_and_liv_nsteps_per_day = 0._r8\n\n\t! actual withdrawl\n\tthis%dom_withd_actual_grc(bounds%begg:bounds%endg) = 0._r8\n\t... ! same for other sectors\n\n\t! actual consumption\n\tthis%dom_cons_actual_grc(bounds%begg:bounds%endg) = 0._r8\n\t... ! same for other sectors\n\n\t! actual return flow\n\tthis%dom_rf_actual_grc(bounds%begg:bounds%endg) = 0._r8\n\t... ! same for other sectors\nend subroutine SectorWaterInitCold\n\n!-----------------------------------------------------------------------\n\npure function Calc_dom_and_liv_NstepsPerDay(this, dtime) result(dom_and_liv_nsteps_per_day)\n\t! !DESCRIPTION:\n\t! Given dtime (sec), determine number of steps per day to satisfy demand for domestic and livestock sectors\n\t...\nend function Calc_dom_and_liv_NstepsPerDay\n\n!-----------------------------------------------------------------------\n\npure function Calc_ind_NstepsPerDay(this, dtime) result(ind_nsteps_per_day)\n\t! !DESCRIPTION:\n\t! Given dtime (sec), determine number of steps per day to satisfy demand for industrial sectors\n\t...\nend function Calc_ind_NstepsPerDay\n\n!-----------------------------------------------------------------------\n\nsubroutine SectorWaterClean(this)\n\t! !DESCRIPTION:\n\n\t! Deallocate memory for all sectorwater_type variables\n\t...\nend subroutine sectorWaterClean\n\n! ========================================================================\n\n! Science routines\n\n! ========================================================================  \n\nsubroutine ReadSectorWaterData (this, bounds, mon)\n\t! !DESCRIPTION:\n\n\t! read the input data from fsurfdata (withdrawal and consumption)\n\t! at the moment fsurfdata for sector water module test have the data \n\t! for year 2000 in monthly format for all sectors\n\t! when we will finish development we will not rely on surfdata, but on \n\t! alternative methods more convenient for transient data\n\n\t! !USES:\n\t...\n\n\t! !ARGUMENTS:\n\tclass(sectorwater_type), intent(inout) :: this\n\ttype(bounds_type) , intent(in) :: bounds\n\tinteger , intent(in) :: mon ! month (1, ..., 12) for nstep+1\n\n\t! !LOCAL VARIABLES:\n\n\ttype(file_desc_t) :: ncid ! netcdf id\n\tinteger :: ier ! error code\n\tinteger :: g ! gridcell index\n\tinteger :: ni,nj,ns ! indices\n\tinteger :: dimid,varid ! input netCDF id's\n\tinteger :: ntim ! number of input data time samples\n\tinteger :: nlon_i ! number of input data longitudes\n\tinteger :: nlat_i ! number of input data latitudes\n\tlogical :: isgrid2d ! true =\u003e file is 2d\n\t\n\treal(r8), pointer :: mon_dom_withd(:) ! monthly domestic withdrawal read from input files\n\treal(r8), pointer :: mon_dom_cons(:) ! monthly domestic consumption read from input files\n\t... ! Same for other sectors\n\n\n\tcharacter(len=256) :: locfn ! local file name\n\tcharacter(len=32) :: subname = 'ReadSectorWaterData'\n\n\t!-----------------------------------------------------------------------\n\n\tif (masterproc) then\n\n\t\twrite (iulog,*) 'Attempting to read annual sectoral water usage data .....'\n\tend if\n\n\n\tallocate(\u0026\n\tmon_dom_withd(bounds%begg:bounds%endg), \u0026\n\tmon_dom_cons(bounds%begg:bounds%endg), \u0026\n\t..., \u0026 ! same for other sectors \n\tstat=ier)\n\n\t! Determine necessary indices\n\tcall getfil(fsurdat, locfn, 0)\n\tcall ncd_pio_openfile (ncid, trim(locfn), 0)\n\tcall ncd_inqfdims (ncid, isgrid2d, ni, nj, ns)\n\n\t! Check if ldomain and input file have matching dimensions (ni, nj and ns)\n\t! if not then abort run\n\t...\n\n\t! read the data for current month\n\tcall ncd_io(ncid=ncid, varname='withd_dom', flag='read', data=mon_dom_withd, \u0026\n\tdim1name=grlnd, nt=mon)\n\tcall ncd_io(ncid=ncid, varname='cons_dom', flag='read', data=mon_dom_cons, \u0026\n\tdim1name=grlnd, nt=mon)\n\n\t... ! do the same for other sectors\n\n\tcall ncd_pio_closefile(ncid) ! close input file\n\n\t! fill the sectorwater_type input fields with current month \n\t! withdrawal and consumption (loop over each gridcell)\n\tdo g = bounds%begg,bounds%endg\n\t\tthis%input_mon_dom_withd_grc(g) = mon_dom_withd(g)\n\t\tthis%input_mon_dom_cons_grc(g) = mon_dom_cons(g)\n\n\t\t... ! do the same for other sectors\n\tend do\n\nend subroutine ReadSectorWaterData\n\n!-----------------------------------------------------------------------\n\nsubroutine CalcSectorWaterNeeded(this, bounds, volr, rof_prognostic)\n\t! !DESCRIPTION:\n\t! Calculate sector water fluxes (withdrawal, consumption)\n\n\t! !USES:\n\tuse shr_const_mod , only : SHR_CONST_TKFRZ\n\tuse clm_time_manager , only : get_curr_date, is_end_curr_month, get_curr_days_per_year\n\n\t! !ARGUMENTS:\n\tclass(sectorwater_type) , intent(inout) :: this\n\ttype(bounds_type) , intent(in) :: bounds\n\t! river water volume (m3) (ignored if rof_prognostic is .false.)\n\treal(r8), intent(in) :: volr(bounds%begg:bounds%endg)\n\t! whether we're running with a prognostic ROF component; \n\t! this is needed to determine whether we can limit demand based on river volume.\n\tlogical, intent(in) :: rof_prognostic\n\n\t! !LOCAL VARIABLES:\n\tinteger :: g ! gridcell index\n\tinteger :: year ! year (0, ...) for nstep+1\n\tinteger :: mon ! month (1, ..., 12) for nstep+1\n\tinteger :: day ! day of month (1, ..., 31) for nstep+1\n\tinteger :: sec ! seconds into current date for nstep+1\n\treal(r8) :: dayspyr ! days per year\n\treal(r8) :: dayspm ! days per month\n\treal(r8) :: secs_per_day ! seconds per day\n\treal(r8) :: dom_and_liv_flux_factor ! factor to transform the demand from mm per month to mm/s for the given day\n\treal(r8) :: ind_flux_factor ! factor to transform the demand from mm per month to mm/s for the given day\n\n\n\n\treal(r8) :: dom_demand(bounds%begg:bounds%endg)\n\treal(r8) :: dom_demand_volr_limited(bounds%begg:bounds%endg)\n\n\n\treal(r8) :: dom_consumption(bounds%begg:bounds%endg)\n\treal(r8) :: dom_consumption_volr_limited(bounds%begg:bounds%endg)\n\n\t... ! Same for other sectors\n\n\t! Whether we should limit deficits by available volr\n\tlogical :: limit_sectorwater\n\n\tcharacter(len=*), parameter :: subname = 'CalcSectorWaterNeeded'\n\n\t!-----------------------------------------------------------------------\n\n\t! Get current date\n\tcall get_curr_date(year, mon, day, sec)\n\t! Get number of days in current year\n\tdayspyr = get_curr_days_per_year()\n\t! Compute average number of days per month for the current year\n\tdayspm = dayspyr/12_r8\n\t! Compute the flux factors to transform from mm/month to mm/s\n\tdom_and_liv_flux_factor = ((1_r8/dayspm)/this%params%dom_and_liv_length)\n\tind_flux_factor = ((1_r8/dayspm)/this%params%ind_length)\n\n\n\n\t! Read input for new month if end of month\n\t! This will update the input fields of withdrawal and consumption\n\t! of sectorwater_type\n\tif (is_end_curr_month()) then\n\t\tcall this%ReadSectorWaterData(bounds, mon)\n\tendif\n\n\t! Compute demand [mm]\n\t! First initialize demand to 0 everywhere;\n\tdom_demand(bounds%begg:bounds%endg) = 0._r8\n\tdom_consumption(bounds%begg:bounds%endg) = 0._r8\n\n\t... ! same for other sectors\n\n\t! Update this day fluxes based on input data\n\tdo g = bounds%begg,bounds%endg\n\t\tdom_demand(g) = this%input_mon_dom_withd_grc(g)\n\t\tdom_consumption(g) = this%input_mon_dom_cons_grc(g)\n\n\t\t... ! same for other sectors\n\tend do ! end loop over gridcels\n\n\n\n\t! Limit sectoral withdrawal based on volr (river volume)\n\t! Note that we cannot do this limiting if running without a prognostic\n\t! river model, since we need river volume for this limiting.\n\tlimit_sectorwater = (this%params%limit_sectorwater_if_rof_enabled .and. rof_prognostic)\n\n\tif (limit_sectorwater) then\n\n\t\t! Compute the allowed withdrawal if water limitation is taken into account\n\t\tcall this%CalcSectorDemandVolrLimited( \u0026\n\t\tbounds = bounds, \u0026\n\t\tdom_demand = dom_demand(bounds%begg:bounds%endg), \u0026\n\t\tdom_consumption = dom_consumption(bounds%begg:bounds%endg), \u0026\n\t\tliv_demand = liv_demand(bounds%begg:bounds%endg), \u0026\n\t\tliv_consumption = liv_consumption(bounds%begg:bounds%endg), \u0026\n\t\telec_demand = elec_demand(bounds%begg:bounds%endg), \u0026\n\t\telec_consumption = elec_consumption(bounds%begg:bounds%endg), \u0026\n\t\tmfc_demand = mfc_demand(bounds%begg:bounds%endg), \u0026\n\t\tmfc_consumption = mfc_consumption(bounds%begg:bounds%endg), \u0026\n\t\tmin_demand = min_demand(bounds%begg:bounds%endg), \u0026\n\t\tmin_consumption = min_consumption(bounds%begg:bounds%endg), \u0026\n\t\tvolr = volr(bounds%begg:bounds%endg), \u0026\n\t\tdom_demand_volr_limited = dom_demand_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tdom_consumption_volr_limited = dom_consumption_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tliv_demand_volr_limited = liv_demand_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tliv_consumption_volr_limited = liv_consumption_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\telec_demand_volr_limited = elec_demand_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\telec_consumption_volr_limited = elec_consumption_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tmfc_demand_volr_limited = mfc_demand_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tmfc_consumption_volr_limited = mfc_consumption_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tmin_demand_volr_limited = min_demand_volr_limited(bounds%begg:bounds%endg), \u0026\n\t\tmin_consumption_volr_limited = min_consumption_volr_limited(bounds%begg:bounds%endg))\n\n\telse\n\t\t! If water limitation is not considered\n\t\t! the consider the volr_limited withdrawals to be the same\n\t\t! as input based withdrawl\n\t\tdom_demand_volr_limited(bounds%begg:bounds%endg) = dom_demand(bounds%begg:bounds%endg)\n\t\tdom_consumption_volr_limited(bounds%begg:bounds%endg) = dom_consumption(bounds%begg:bounds%endg)\n\t\t... ! do the same for the other sectors\n\tend if\n\n\n\n\t! Convert demand to withdrawal rates [mm/s]\n\n\tdo g = bounds%begg,bounds%endg\n\t\t! compute expected and actual withdrawal and consumption\n\t\tthis%dom_withd_grc(g) = dom_demand(g)*dom_and_liv_flux_factor\n\t\tthis%dom_withd_actual_grc(g) = dom_demand_volr_limited(g)*dom_and_liv_flux_factor\n\n\t\tthis%dom_cons_grc(g) = dom_consumption(g)*dom_and_liv_flux_factor\n\t\tthis%dom_cons_actual_grc(g) = dom_consumption_volr_limited(g)*dom_and_liv_flux_factor\n\n\t\t! computed actual return flow\n\t\tthis%dom_rf_actual_grc(g) = this%dom_withd_actual_grc(g) - this%dom_cons_actual_grc(g)\n\n\t\t! Do the same for other sectors\n\t\t...\n\tend do\n\nend subroutine CalcSectorWaterNeeded\n\n!-----------------------------------------------------------------------\n\nsubroutine CalcSectorDemandVolrLimited(this, bounds, dom_demand, dom_consumption, liv_demand, liv_consumption, elec_demand, elec_consumption, \u0026\nmfc_demand, mfc_consumption, min_demand, min_consumption, volr, dom_demand_volr_limited, dom_consumption_volr_limited, liv_demand_volr_limited, \u0026\nliv_consumption_volr_limited, elec_demand_volr_limited, elec_consumption_volr_limited, mfc_demand_volr_limited, \u0026\nmfc_consumption_volr_limited, min_demand_volr_limited, min_consumption_volr_limited)\n\n\t! !ARGUMENTS:\n\tclass(sectorwater_type) , intent(in) :: this\n\ttype(bounds_type) , intent(in) :: bounds\n\n\treal(r8), intent(in) :: dom_demand( bounds%begg:bounds%endg)\n\treal(r8), intent(in) :: dom_consumption( bounds%begg:bounds%endg)\n\n\t... ! same for other sectors\n\n\n\t! river water volume [m3]\n\treal(r8), intent(in) :: volr( bounds%begg:bounds%endg)\n\n\treal(r8), intent(out) :: dom_demand_volr_limited( bounds%begg:bounds%endg)\n\treal(r8), intent(out) :: dom_consumption_volr_limited( bounds%begg:bounds%endg)\n\n\t... ! same for other sectors\n\n\t! !LOCAL VARIABLES:\n\tinteger :: g ! gridcell index\n\treal(r8) :: available_volr ! volr available for withdrawal [m3]\n\treal(r8) :: max_demand_supported_by_volr ! [kg/m2] [i.e., mm]\n\n\t! ratio of demand_volr_limited to demand for each grid cell\n\treal(r8) :: dom_demand_limited_ratio_grc(bounds%begg:bounds%endg)\n\t... ! same for other sectors\n\n\tcharacter(len=*), parameter :: subname = 'CalcSectorDemandVolrLimited'\n\n\t!-----------------------------------------------------------------------\n\n\n\tdo g = bounds%begg, bounds%endg\n\n\t\tif (volr(g) \u003e 0._r8) then\n\t\t\tavailable_volr = volr(g) * (1._r8 - this%params%sectorwater_river_volume_threshold)\n\t\t\tmax_demand_supported_by_volr = available_volr/grc%area(g) * m3_over_km2_to_mm\n\t\telse\n\t\t\t! Ensure that negative volr is treated the same as 0 volr\n\t\t\tmax_demand_supported_by_volr = 0._r8\n\t\tend if\n\n\n\n\t\tif (dom_demand(g) \u003e max_demand_supported_by_volr) then\n\t\t\tdom_demand_limited_ratio_grc(g) = max_demand_supported_by_volr / dom_demand(g)\n\t\t\tliv_demand_limited_ratio_grc(g) = 0._r8\n\t\t\telec_demand_limited_ratio_grc(g) = 0._r8\n\t\t\tmfc_demand_limited_ratio_grc(g) = 0._r8\n\t\t\tmin_demand_limited_ratio_grc(g) = 0._r8\n\t\telse if (liv_demand(g) \u003e (max_demand_supported_by_volr - dom_demand(g))) then\n\t\t\tdom_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tliv_demand_limited_ratio_grc(g) = max_demand_supported_by_volr / liv_demand(g)\n\t\t\telec_demand_limited_ratio_grc(g) = 0._r8\n\t\t\tmfc_demand_limited_ratio_grc(g) = 0._r8\n\t\t\tmin_demand_limited_ratio_grc(g) = 0._r8\n\t\telse if (elec_demand(g) \u003e (max_demand_supported_by_volr - dom_demand(g) - liv_demand(g))) then\n\t\t\tdom_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tliv_demand_limited_ratio_grc(g) = 1._r8\n\t\t\telec_demand_limited_ratio_grc(g) = max_demand_supported_by_volr/ elec_demand(g)\n\t\t\tmfc_demand_limited_ratio_grc(g) = 0._r8\n\t\t\tmin_demand_limited_ratio_grc(g) = 0._r8\n\t\telse if (mfc_demand(g) \u003e (max_demand_supported_by_volr - dom_demand(g) - liv_demand(g) - elec_demand(g))) then\n\t\t\tdom_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tliv_demand_limited_ratio_grc(g) = 1._r8\n\t\t\telec_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tmfc_demand_limited_ratio_grc(g) = max_demand_supported_by_volr / mfc_demand(g)\n\t\t\tmin_demand_limited_ratio_grc(g) = 0._r8\n\t\telse if (min_demand(g) \u003e (max_demand_supported_by_volr - dom_demand(g) - liv_demand(g) - elec_demand(g) - mfc_demand(g))) then\n\t\t\tdom_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tliv_demand_limited_ratio_grc(g) = 1._r8\n\t\t\telec_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tmfc_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tmin_demand_limited_ratio_grc(g) = max_demand_supported_by_volr / min_demand(g)\n\t\telse\n\t\t\tdom_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tliv_demand_limited_ratio_grc(g) = 1._r8\n\t\t\telec_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tmfc_demand_limited_ratio_grc(g) = 1._r8\n\t\t\tmin_demand_limited_ratio_grc(g) = 1._r8\n\t\tend if\n\tend do\n\n\n\n\tdom_demand_volr_limited(bounds%begg:bounds%endg) = 0._r8\n\tdom_consumption_volr_limited(bounds%begg:bounds%endg) = 0._r8\n\t... ! same for other sectors\n\n\tdo g = bounds%begg, bounds%endg\n\n\t\tdom_demand_volr_limited(g) = dom_demand(g) * dom_demand_limited_ratio_grc(g)\n\t\tdom_consumption_volr_limited(g) = dom_consumption(g) * dom_demand_limited_ratio_grc(g)\n\n\t\t... ! same for other sectors\n\tend do\nend subroutine CalcSectorDemandVolrLimited\nend module SectorWaterMod\n\n```\n\n## Things to add later:\n- Add a restart procedure\n- For the moment we do not really make use of different start time for domestic/livestock and industrial fluxes (despite adding to params, and some specific procedures). The same goes for the duration of the withdrawls. In the future, we want to make domestic and livestock fluxes to be satisfied between 6AM-12PM (local time), and for industrial fluxes we assume the fluxes to be constant throughout the entire day.\n- I also did an error in the `CalcSectorDemandVolrLimited` subroutine, when I compute the demand_limited_ratio_grc, I use as numerator `max_demand_supported_by_volr`. This is incorect, I need to update this depending on the withdrawal for previous sectors. Since irrigation is satisfied after sectoral, it means that I also need to do some update to the `IrrigationMod.F90` module. This can be done quite easily, we just need to add the `sectorwater_inst` as another input to the `CalcIrrigationNeeded()` subroutine and then update `max_demand_supported_by_volr` by taking into account all previous withdrawals and return flows.\n- Also there are other things which I may need to consider in the future (e.g. when we will use the full input data which is 30 years for `hist` and another 90 years for `ssp-scenarios` experiments I cannot anymore rely on surfdata to read input)\n- Another issue: I give as input to the subroutine checking water limitations depending on river volume the demand for the month. Instead I should give the demand for the day. ","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/Srcfiles":{"title":"Srcfiles","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/clm_driver":{"title":"clm_driver.F90","content":"\n\n## Overview:\nThis module provides the main CLM driver physics calling sequence.  Most computations occurs over `clumps` of gridcells (and associated subgrid  scale entities) assigned to each MPI process. \n\nComputation is further parallelized by looping over clumps on each process using shared memory OpenMP. \n\nFor irrigation there are two calls done in this module: CalcAndWithdrawIrrigationFluxes() and irrigation_inst%CalcIrrigationNeeded()\n\nIn the case of sectoral water usage, we will have only one call to the subroutine: `CalcAndWithdrawSectorWaterFluxes()` which is defined in the [CTSM/src/biogeophys/HydrologyNoDrainageMod.F90](Documentation/CTSM/HydrologyNoDrainageMod.md) module. \n\nThis subroutine do everything required for sectoral water usage implementation: \n- compute the withdrawal and consumption for the day (monthly value from input data devided by number of days in a month);\n- compute actual withdrawal and consumption by accounting for available river water;\n- compute actual return flow (actual withdrawal - actual consumption);\n- update the water instance object which contains the fields (actual withdrawal and return flow) to be send through the coupler so it gets to the river model\n\nThe call is done before CalcAndWithdrawIrrigationFluxes() subroutine. The order is important, since irrigation has the least priority between sectors to satisfy water requirements.\n\n\n## Code:\n```fortran\n...\nsubroutine clm_drv(doalb, nextsw_cday, declinp1, declin, rstwr, nlend, rdate, rof_prognostic)\n\n...\nif (sectorwater) then\n\n\tcall t_startf('sectorwater_calc_and_withdraw')\n\n\tcall CalcAndWithdrawSectorWaterFluxes( \u0026\n               bounds = bounds_clump, \u0026\n               soilhydrology_inst = soilhydrology_inst, \u0026\n               sectorwater_inst = sectorwater_inst, \u0026\n               water_inst = water_inst, \u0026\n               volr       = water_inst%wateratm2lndbulk_inst%volrmch_grc(bounds_clump%begg:bounds_clump%endg), \u0026\n               rof_prognostic = rof_prognostic)\n\n\tcall t_stopf('sectorwater_calc_and_withdraw')\n\nend if\n\n...\n\n```\n\n\n\n## Things which may require change:\n### Accounting for sectoral priority when limited water resources\nCalling `CalcAndWithdrawSectorWaterFluxes()` before `CalcAndWithdrawIrrigationFluxes()` is done because if water is limited we would like to have the following priority for water usage: domestic (highest), livestock, thermoelectric, manufacturing, mining, irrigation (lowest). But at the moment this is not really done, as I don't update the `volr` (avaialable river water) after withdrawing for the sectors. I think one way to do this is to maybe change the input of `irrigation_inst%CalcIrrigationNeeded()` with instead of giving the `volr`, provide `volr - [total actual withdrawal - total actual return flow]`, where `total actual withdrawal / return flow` is the sum of the contributions of the 5 sectors (domestic, livestock, thermoelectric, manufacturing and mining). We can think of other solution too, but in general something in this spirit.\n\n### How to deal with consumpted water?\nAlso at the moment, we don't do anything about the consumed water. But the plan is to add it to the surface soil layer over natural vegetation and pervious roads columns. The choice of columns over which we will add the consumed water may change, but in any case we should avoid to place this water on the irrigated land (to not interfere with irrigation process).\n\nThe application of consumed water should be distributed proportionally (for example if in one grid there is x=20% of pervious roads, and y=25% of natural vegetation, and other land is something else, then all consumed water should be distribute proportionally between x and y. Since y/x=1.25, the pervious roads will receive 100/(1+1.25) =\u003e 44.45% of consumption and the natural vegetation the 55.55% remaining.\n\n### Usage of groundwater as a source for sectoral fluxes\nAt the moment, water is taken only from the surface water (rivers).\nThe CTSM model already supports water withdrawal from unconfined groundwater (already available for the irrigation). Therefore one of the things we intend to add is partially satisfy sectoral demand from groundwater.\n\nThe way this is done at the moment in CTSM:\n1. We satisfy as much as possible from surface water.\n2. We satisfy the rest from unconfined groundwater (if not enough take as much as available)\n\nThis strategy do not seem optimal, since it may underestimate groundwater withdrawal for regions havily relying on  this source. So in the future we may wish to change this.\n\n\n\n","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/clm_instMod":{"title":"clm_instMod.F90","content":"\n## Overview:\nIn the new module [CTSM/src/biogeophys/SectorWaterMod.F90](Documentation/CTSM/SectorWaterMod.md) we define a new type: `sectorwater_type`.\n\nIn this module we create the instance of this object `sectorwater_inst` which later is used during the run.\n\nWe also do here the initialization which include allocating the memory and providing default values to the object fields.\n\n\n## Code:\n```fortran\n...\n\n! from new module SectorWaterMod.F90 use the sectorwater_type (provide access)\nuse SectorWaterMod                  , only : sectorwater_type\n...\n\n! create instance of the object\ntype(sectorwater_type), public          :: sectorwater_inst\n...\n\n! Initialization\ncall sectorwater_inst%init(bounds, nlfilename, use_aquifer_layer = use_aquifer_layer())\n\n...\n```","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/clm_varctl":{"title":"clm_varctl.F90","content":"\n## Overview:\nThis module contains the run control variables.\n\nTo support sectoral water usage we add the `sectorwater` logic variable.\nThe default value is `.false.` meaning that by default sectoral water usage is not done (this can be changed in clm user namelist after case setup)\n## Code:\n```fortran\n\n!----------------------------------------------------------\n  ! Sector water usage logic\n  !----------------------------------------------------------\n  \n  ! do not satisfy sector water demand by default\n  logical, public :: sectorwater = .false.        \n\n```","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/clm_varpar":{"title":"clm_varpar.F90","content":"\n## Overview:\nJust added the capacity to access the `sectorwater` logical variable.\n\n! Not sure is needed. Probably to delete in the future. ! ","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/controlMod":{"title":"controlMod.F90","content":"## Overview:\nHere we add the `clm_inparm` namelist group the logical entry `sectorwater`.\n\nAlso we `mpi_bcast` the `sectorwater` value to all the processes of the group.","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/mkfileMod":{"title":"mkfileMod.F90","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/mksectorwaterMod":{"title":"mksectorwaterMod.F90","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/mksurfdat":{"title":"mksurfdat.F90","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/mksurfdata":{"title":"mksurfata.pl","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/mksurfdata_map":{"title":"mksurfdata_map.namelist","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/mkvarctl":{"title":"mkvarctl.F90","content":"","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/namelist_defaults_ctsm":{"title":"namelist_defaults_ctsm.xml","content":"\n## Overview:\nHere we add the default values for the namelist entries supporting sectoral water usage (see groups 1-2 in [CTSM/bld/namelist_files/namelist_definition_ctsm.xml](Documentation/CTSM/namelist_definition_ctsm.md)).\n\n## Code:\n```php\n\u003c!-- Sector Water Usage default --\u003e\n\u003csectorwater phys=\"clm5_1\" sim_year_range=\"1850-2100\"\u003e.false.\u003c/sectorwater\u003e\n\u003csectorwater phys=\"clm5_0\" sim_year_range=\"1850-2100\"\u003e.false.\u003c/sectorwater\u003e\n\u003csectorwater phys=\"clm4_5\" sim_year_range=\"1850-2100\"\u003e.false.\u003c/sectorwater\u003e\n\n\u003csectorwater \u003e.false.\u003c/sectorwater\u003e\n\t\n\n\u003c!-- Sector water usage namelist defaults --\u003e\n\u003cdom_and_liv_start_time\u003e0\u003c/dom_and_liv_start_time\u003e\n\u003cind_start_time\u003e0\u003c/ind_start_time\u003e\n\u003cdom_and_liv_length\u003e86400\u003c/dom_and_liv_length\u003e\n\u003cind_length\u003e86400\u003c/ind_length\u003e\n\u003csectorwater_river_volume_threshold\u003e0.1\u003c/sectorwater_river_volume_threshold\u003e\n\t\n\u003c!--  River storage derived lake evaporation and sector water usage limitation  --\u003e\n\u003climit_sectorwater_if_rof_enabled phys=\"clm5_1\" \u003e.false.\u003c/limit_sectorwater_if_rof_enabled\u003e\n\u003climit_sectorwater_if_rof_enabled phys=\"clm5_0\" \u003e.false.\u003c/limit_sectorwater_if_rof_enabled\u003e\n\u003climit_sectorwater_if_rof_enabled               \u003e.false.\u003c/limit_sectorwater_if_rof_enabled\u003e\n\n\u003cuse_groundwater_sectorwater\u003e.false.\u003c/use_groundwater_sectorwater\u003e\n\n```","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/namelist_defaults_ctsm_tools":{"title":"namelist_defaults_ctsm_tools.xml","content":"\n\n## Overview:\nHere we add the required entries to allow the preparation of the `surfdata` based on the prepared `rawdata` dataset for year 2000. ","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/namelist_definition_ctsm":{"title":"namelist_definition_ctsm.xml","content":"\n## Overview:\nTo support sectoral water usage we add the relevant namelist entries.\n\nThere are 4 namelist groups which are affected by our changes.\n1. `sectorwater_inparm` which is defined in the new module [CTSM/src/biogeophys/SectorWaterMod.F90](Documentation/CTSM/SectorWaterMod.md). This namelist group have the following entries: `dom_and_liv_start_time`,  `ind_start_time`,  `dom_and_liv_length`, `ind_length`, `sectorwater_river_volume_threshold`, `limit_sectorwater_if_rof_enabled`,  `use_groundwater_sectorwater` .\n2. `clm_inparm` which is defined in [CTSM/src/main/clm_varctl.F90](Documentation/CTSM/clm_varctl.md). In this namelist group only one entry is added `sectorwater`\n3. `default_settings` where we add `mksrf_fsectorwater` as valid value.\n4. `clmexp` where we add `mksrf_fsectorwater` to the mksurfdata category.","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/CTSM/restFileMod":{"title":"restFileMod.F90","content":"## Overview:\nHere we simply add to the global metadata the status of the logical flag corresponding to the sector water use (`sectorwater`). ","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/Input_Data":{"title":"Input Data","content":"## Overview:\nTo estimate daily withdrawal and consumption fluxes we rely on existing datasets.\n\nFor historical period, we use the sectoral water usage reconstruction by [Huang et al, 2018](https://hess.copernicus.org/articles/22/2117/2018/). This dataset provide monthly withdrawal and consumption data for the period 1971-2010 for 6 sectors (irrigation, domestic, livestock, thermoelectric, manufacturing and mining).\n\nIn the case of CESM model, irrigation is already implemented, so the plan for this project is to account for the other 5 sectors to completely capture the human related water usage.\n\nFor future applications, we intend to use spatially and temporally downscaled GCAM data. This is a new dataset, covering a combination of 4RCMx5SSPx5GCM matrix. More information about the methodology can be found from [Khan et al, 2022](https://jgcri.github.io/khan-etal_2022_tethysSSPRCP/metarepo.html#Citation).","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/Changes_Tracker_MOSART":{"title":"Changes Tracker MOSART","content":"\n\n## Here we track all modifications done to the MOSART in order to support sectoral water usage\n\nThe GitHub fork can be accessed [here](https://github.com/TaranuDev/MOSART)\n\n\n\n## List of modifications:\n### Routing part\n- [/MOSART/src/riverroute/RtmHistFlds.F90](Documentation/MOSART/RtmHistFlds.md)\n- [/MOSART/src/riverroute/RunoffMod.F90](Documentation/MOSART/RunoffMod.md)\n- [/MOSART/src/riverroute/RtmMod.F90](Documentation/MOSART/RtmMod.md)\n\n\n### Coupler part\n- [/MOSART/src/cpl/mct/rof_comp_mct.F90](Documentation/MOSART/rof_comp_mct.md)\n- [/MOSART/src/cpl/mct/mosart_import_export.F90](Documentation/MOSART/mosart_import_export.md)\n- [/MOSART/src/cpl/mct/mosart_cpl_indices.F90](Documentation/MOSART/mosart_cpl_indices.md)\n- [/MOSART/src/cpl/nuopc/rof_import_export.F90](Documentation/MOSART/rof_import_export.md)","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/RtmHistFlds":{"title":"RtmHistFlds.F90","content":"\n## Overview:\nFor each sector we add 3 new outputs from the routing model.\nThese are: \n- QsectorX_WITHD_FROM_COUPLER\n- QsectorX_RF_FROM_COUPLER\n- QsectorX_ACTUAL\n\nIn general QsectorX_WITHD_FROM_COUPLER already corresponds to an actual withdrawal, since river volume is also accounted in the `land component`. But since the coupling period between the `land` and `routing` component do not happen at each step, there is the possibility that the land model will use more water than actually available in the grid river network. So, an additional volume check is done in the routing model and if indeed the withdrawal from the coupler is higher than available river water, than new actual withdrawal is computed as seen by the routing model (while the difference with coupler is sent to the ocean).\n\nThese 3 variables are enough to deduce over variables of interest. For example we can compute:\nQDOM_ACTUAL_RF = (QDOM_ACTUAL/QDOM_WITHD_FROM_COUPLER) x QDOM_RF_FROM_COUPLER\n\n## Code:\n```fortran\nsubroutine RtmHistFldsInit()\n...\ncall RtmHistAddfld (fname='QDOM_WITHD_FROM_COUPLER', units='m3/s',  \u0026\n                 avgflag='A', long_name='Amount of water withdrew for domestic usage', \u0026\n              ptr_rof=rtmCTL%qdom_withd, default='inactive')\n     \ncall RtmHistAddfld (fname='QDOM_RF_FROM_COUPLER', units='m3/s',  \u0026\n                 avgflag='A', long_name='Amount of water returned from domestic usage', \u0026\n              ptr_rof=rtmCTL%qdom_rf, default='inactive')\n\t\t\t  \ncall RtmHistAddfld (fname='QDOM_ACTUAL', units='m3/s',  \u0026\n                 avgflag='A', long_name='Actual domestic usage (if limited by river storage)', \u0026\n              ptr_rof=rtmCTL%qdom_actual, default='inactive')\n...     \nend subroutine RtmHistFldsInit\n```\n\n","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/RtmMod":{"title":"RtmMod.F90","content":"\n## Overview:\nThe Rtmrun() subroutine is basically the routing model itself.\nFor supporting sectoral water usage we have to implement several changes, and notably to calculate the actual withdrawals and return flows taking into account the available river water, as well as account for these flows in the routing budget.\n\nTo do so, we have the actual withdrawal and return flows received from the `land component` through the `coupler` which are stored in `rtmCTL` object (as well as other debits related to the routing model). \n\nThe problem is that the coupling period of MOSART is a multiple of the CLM timestep and therefore it is likely that sometimes the actual withdrawal in the `land component` will actually exceed the avaialable resources. This can lead to negative flow, which we want to avoid. This is why we add another layer of constraint to the sectoral abstractions, by accounting the available river storage in MOSART. \n\nIf the withdrawal exceeds the avaialable resources, then the actual withdrawal is reduced, and the difference which was satisfied in the land component, but cannot be satisfied from the river water, is sent to the subsurface runoff.\n\nIn the Rtmrun() we have some code on how to deal with negative subsurface runoff which can emerge if the sectoral withdrawals are to high. In this case the subsurface runoff is made equal to 0, and the difference is sent to the `rtmCTL%direct` which is equivalent to sending the difference directly to the ocean.\n\nOnce we have the actual withdrawal and return flows \n\n\n## Code:\n```fortran\nsubroutine Rtmrun(rstwr,nlend,rdate)\n\t...\n\t! For each sector create variable to store withdrawn volume \n   \treal(r8) :: dom_volume ! volume of domestic usage demand during time step [m3]\n\t...\n\t! Set the actual withdrawal for each sector to 0\n\t! The rtmCTL object is an instance of the runoff_flow object\n\t! and contains all the debits (m3/s) relevant to the routing model\n\trtmCTL%qdom_actual = 0._r8\n\t...\n\tcall t_startf('mosartr_budget')\n\tdo nt = 1,nt_rtm ! loop over number of tracers\n\tdo nr = rtmCTL%begr,rtmCTL%endr ! loop over MOSART cells\n\t\t...\n\t\tif (nt==1) then ! if (liquid water) then\n\t\t...\n\t\t! add new budget terms for each sector (before 30, now 40)\n\t\t! in total 2 budgets per sector (withdrawal and return flow)\n\t\t! the budget terms related to sectoral water use are between 17 and 26 \n\t\t! in comparison with previous version all budget terms higher than 16 \n\t\t! were shifted by 10, so that 17 become 27 and so on\n\t\tbudget_terms(17,nt) = budget_terms(17,nt) + rtmCTL%qdom_withd(nr)\n\t\tbudget_terms(22,nt) = budget_terms(22,nt) + rtmCTL%qdom_rf(nr)\n\t\t...\n\t\tendif\n\tend do\n\tend do\n\t\n\t...\n\t\n\t!-----------------------------------\n    ! Compute sectoral fluxes based on demand from clm\n\t! Must be calculated before volr is updated to be consistent with lnd\n\t! Just consider land points and only act on the liquid water (nt=1)\n\t!-----------------------------------\n\tcall t_startf('mosartr_irrig')\n\tnt = 1 ! only liquid water is concerned\n\t! make sure that rtmCTL sectoral debits are set to 0 (dummy values)\n\t...\n\trtmCTL%qdom_actual = 0._r8\n\t...\n\tdo nr = rtmCTL%begr,rtmCTL%endr ! loop over MOSART cells\n\t\n\t! calculate volume of domestic flux during coupling period\n\t! we use coupling period instead of MOSART internal time-step\n\t! because this is the frequency at which the demand is updated from \n\t! land component\n\tdom_volume = -rtmCTL%qdom_withd(nr) * coupling_period\n\t...\n\t! compare water usage volume to main channel storage; \n    ! priority in usage: \n\t! domestic\u003e livestock \u003e thermoelectric \u003e manufacturing \u003e mining \u003e irrigation\n\t! add overage to subsurface runoff\n\tif(dom_volume \u003e TRunoff%wr(nr,nt)) then\n\t\t! if water missing for domestic, domestic have what's there,\n\t\t! all the other usages have 0\n        rtmCTL%qsub(nr,nt) = \u0026\n\t\trtmCTL%qsub(nr,nt) + (TRunoff%wr(nr,nt) - dom_volume - liv_volume \u0026\n                       - elec_volume - mfc_volume - min_volume)/coupling_period\n\t\t\t\t\t   \n\t\tTRunoff%qsub(nr,nt) = rtmCTL%qsub(nr,nt)\n\t\tdom_volume = TRunoff%wr(nr,nt) \n\t\tliv_volume = 0._r8\n\t\telec_volume = 0._r8\n\t\tmfc_volume = 0._r8\n\t\tmin_volume = 0._r8\n\t\tirrig_volume = 0._r8\n\t\t\n\telseif(liv_volume \u003e  TRunoff%wr(nr,nt) - dom_volume) then\n\t\t! if water missing for livestock after having taken domestic, \n\t\t! livestock takes what is left \n\t\t! following usages have 0\n\t\trtmCTL%qsub(nr,nt) =  \u0026 \n\t\trtmCTL%qsub(nr,nt) + (TRunoff%wr(nr,nt) - irrig_volume - dom_volume \u0026       - liv_volume - elec_volume - mfc_volume - min_volume)/coupling_period\n\t\t\n\t\tTRunoff%qsub(nr,nt) = rtmCTL%qsub(nr,nt)\n\t\tliv_volume = TRunoff%wr(nr,nt) - dom_volume\n\t\telec_volume = 0._r8\n\t\tmfc_volume = 0._r8\n\t\tmin_volume = 0._r8\n\t\tirrig_volume = 0._r8\n\t\t\n\telseif(elec_volume \u003e TRunoff%wr(nr,nt) - dom_volume - liv_volume) then\n\t\t! if water missing for thermoelectric after having taken domestic\n\t\t! and livestock, thermoelectric  takes what is left\n\t\t! following usages have 0\n\t\trtmCTL%qsub(nr,nt) = \u0026 \n\t\trtmCTL%qsub(nr,nt) + (TRunoff%wr(nr,nt) - irrig_volume - dom_volume  \u0026       - liv_volume - elec_volume - mfc_volume - min_volume)/coupling_period\n\t\t\n\t\tTRunoff%qsub(nr,nt) = rtmCTL%qsub(nr,nt)\n\t\telec_volume = TRunoff%wr(nr,nt) - dom_volume - liv_volume\n\t\tmfc_volume = 0._r8\n\t\tmin_volume = 0._r8\n\t\tirrig_volume = 0._r8\n\telseif(mfc_volume \u003e TRunoff%wr(nr,nt) - dom_volume - liv_volume - \u0026           elec_volume) then \n\t\t! if water missing for manufacturing after having taken domestic, \n\t\t! livestock and thermoelectric\n\t\t! manufacturing takes what is left\n\t\t! following usages have 0\n\t\trtmCTL%qsub(nr,nt) = \u0026\n\t\trtmCTL%qsub(nr,nt) + (TRunoff%wr(nr,nt) - irrig_volume - dom_volume - \u0026     liv_volume - elec_volume - mfc_volume - min_volume)/coupling_period\n\t\t\n\t\tTRunoff%qsub(nr,nt) = rtmCTL%qsub(nr,nt)\n\t\tmfc_volume = TRunoff%wr(nr,nt) - dom_volume - liv_volume - elec_volume\n\t\tmin_volume = 0._r8\n\t\tirrig_volume = 0._r8\n\telseif(min_volume  \u003e TRunoff%wr(nr,nt)-dom_volume-liv_volume- \u0026 \t\t\t\t\t\t\t\t\t\t\t   elec_volume - mfc_volume) then\n\t\t! if water missing for mining after having taken domestic, livestock, \n\t\t! thermoelectric and manufacturing\n\t\t! mining takes what is left \n\t\t! irrigation have 0\n\t\trtmCTL%qsub(nr,nt) = \u0026 \n\t\trtmCTL%qsub(nr,nt) + (TRunoff%wr(nr,nt) - irrig_volume - dom_volume - liv_volume - elec_volume - mfc_volume - min_volume)/coupling_period\n\t\t\n\t\tTRunoff%qsub(nr,nt) = rtmCTL%qsub(nr,nt)\n\t\tmin_volume = TRunoff%wr(nr,nt) -dom_volume-liv_volume- \u0026\t\t             elec_volume - mfc_volume\n\t\tirrig_volume = 0._r8\n\telseif(irrig_volume \u003e TRunoff%wr(nr,nt)-dom_volume-liv_volume-\t\u0026             elec_volume-mfc_volume-min_volume) then\n\t\t! if water missing for irrigation after having taken all others,\n\t\t! irrigation takes what is left\n\t\trtmCTL%qsub(nr,nt) = rtmCTL%qsub(nr,nt) + (TRunoff%wr(nr,nt) - \u0026 \t\t\t\t\t\t\t\t\t     irrig_volume - dom_volume - liv_volume \u0026\n         - elec_volume - mfc_volume - min_volume)/coupling_period\n\t\t \n\t\tTRunoff%qsub(nr,nt) = rtmCTL%qsub(nr,nt)\n\t\tirrig_volume = TRunoff%wr(nr,nt) -dom_volume-liv_volume- \u0026 \t\t\t         elec_volume-mfc_volume-min_volume\n\tendif\n\t\n\t! compute actual irrigation / domestic / thermoelectric / livestick / mining\n\t! / manufacturing rate [m3/s]\n\t! i.e. the rate actually removed from the main channel\n\t! if irrig_volume is greater than TRunoff%wr\n\trtmCTL%qirrig_actual(nr) = - irrig_volume / coupling_period\n\trtmCTL%qdom_actual(nr) = - dom_volume / coupling_period\n\trtmCTL%qelec_actual(nr) = - elec_volume / coupling_period\n\trtmCTL%qliv_actual(nr) = - liv_volume / coupling_period\n\trtmCTL%qmfc_actual(nr) = - mfc_volume / coupling_period\n\trtmCTL%qmin_actual(nr) = - min_volume / coupling_period\n   \n\t! remove withdrawals for all sectors and add the return flows to wr\n\t! (main channel)\n\t! the return flows are scaled to the actual withdrawals \n\t! (irrigation have no return flow)\n\tTRunoff%wr(nr,nt) = TRunoff%wr(nr,nt) - irrig_volume - dom_volume \u0026\n\t- elec_volume - liv_volume - mfc_volume - min_volume + \u0026\n\t\u0026\n\t(rtmCTL%qdom_actual(nr)/rtmCTL%qdom_withd(nr))*                          \t\t   (rtmCTL%qdom_rf(nr)*coupling_period) + \u0026\n\t\u0026\n\t(rtmCTL%qliv_actual(nr)/rtmCTL%qliv_withd(nr))*                               (rtmCTL%qliv_rf(nr)*coupling_period) + \u0026\t\n\t\u0026\n\t(rtmCTL%qelec_actual(nr)/rtmCTL%qelec_withd(nr))*                             (rtmCTL%qelec_rf(nr)*coupling_period) + \u0026\n\t\u0026\n\t(rtmCTL%qmfc_actual(nr)/rtmCTL%qmfc_withd(nr))*                               (rtmCTL%qmfc_rf(nr)*coupling_period) + \u0026\n\t\u0026\n\t(rtmCTL%qmin_actual(nr)/rtmCTL%qmin_withd(nr))*                               (rtmCTL%qmin_rf(nr)*coupling_period) \n\t\n\tenddo\n\tcall t_stopf('mosartr_irrig')\n   \n\t...\n\t\n\t! add the budget terms corresponding to the sectoral water usage to the \n\t! budget input (necessary for the budget check over the run to check \n\t! if coherent results)\n\t\n\t! also add the new budgets to the MOSART diagnostics outputs\nend subroutine Rtmrun\n```\n\n\n## Things which may require change\n```fortran\n! change mosartr_irrig -\u003e mosartr_sectorwater (since we extended the usage to the other sectors too)\ncall t_startf('mosartr_irrig') \n...\ncall t_stopf('mosartr_irrig')\n```\n\nAlso I need to think if the budget at the end is done correctly.\nIf my guess is correct there will be a mistake.\n\nIn principle the withdrawal is done correctly since if you sum the part which is actually is withdrawn from the river, the part from subsurface runoff and the one which went into the ocean, the result should equal the actual withdrawal received from the `land component`.\n\nOn the other hand I did adjust the return flow taking into what was actually taken from the river while I make the liquid water budget `TRunoff%wr(nr,nt)`, but I forgot to send the difference between the return flow seen by `land component` and the which should be added to the `routing component` to the `rtmCTL%direct`. \n\nHere I am also not 100% what is best, to send all to direct, or try partly recharge the subsurface runoff? I think the correct way will be the second option, but also a bit more complicated.\n\nOther than this the code looks good to me.\n\nIssue: I forgot to substract irrigation demand from `TRunoff%wr` in the `if(dom_volume \u003e TRunoff%wr(nr,nt)) then` statement.","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/RunoffMod":{"title":"RunoffMod.F90","content":"\n\n## Overview:\nSmall changes to the `runoff_flow` type for support of sectoral water fluxes.\nAlso allocate the memory and initialize variables with default values (zeros).\n\n## Code:\n```fortran\n! no need to show the code as it is very simple\n! it is here that the runoff_flow type is defined (rtmCTR is the instance of\n! this type)\n\n! so we just add: qsectorX_withd(:), qsectorX_rf(:) and qsectorX_actual(:)\n! variables to the object as well as allocate the memory and initialize with\n! default values\n```","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/mosart_cpl_indices":{"title":"mosart_cpl_indices.F90","content":"\n\n## Overview:\nThis module simply extract the indices for the fields passed between MOSART and the driver.\n\nTo support sectoral water usage we add the indices corresponding to sectoral water usage. Later these indices are used to extract the corresponding field from the array `coupler -\u003e routing`.","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/mosart_import_export":{"title":"mosart_import_export.F90","content":"\n\n## Overview:\nUsing the import fields indices for sectoral water usage fluxes defined in [MOSART/src/cpl/mct/mosart_cpl_indices.F90](Documentation/MOSART/mosart_cpl_indices.md) we extract the relevant fields (withdrawal and return flow for each sector) and store them in the `rtmCTL` object which is an instance of `runoff_flow` object.\n\n","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/rof_comp_mct":{"title":"rof_comp_mct.F90","content":"\n\nAdd possibility to access the indices for sectoral water usage as defined in [MOSART/src/cpl/mct/mosart_cpl_indices.F90](Documentation/MOSART/mosart_cpl_indices.md).\n\nBut not sure if really required.","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/MOSART/rof_import_export":{"title":"rof_import_export.F90","content":"\n## Overview:\nHere we do the important of relevant fields from `importState` (from coupler to rof).\n\nTo support sectoral water usage, we add the import of withdrawal and return fluxes for each sector.","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/Model_Development_for_Sectoral_Water_Usage":{"title":"Model development for improved representation of human water interface in CESM","content":"\n## General discussion:\nDescribing human-water interactions is one of the grand challenges in Earth system modelling. Despite previous initiatives (GEWEX, 2012), limited progress was made in this direction.\n\nThe main objective of our project is to reduce this gap, by enhancing the Community Earth System Model to support all major water use sectors, including domestic, livestock, thermoelectric, manufacturing, mining and irrigation.\n\nBy accounting for human water usage patterns in an Earth system model, it will be possible to improve our current understanding of the interplay between water demand and supply in a changing climate. Some possible applications may be:\n\n(1)   Identify regions experiencing water scarcity and explicitly assess to which extent water resources limitation are hindering socio-economic development through unmet demand across sectors.\n\n(2)   Explore future scenarios of climate change and the associated risks for regional and global water security.\n\n(3)   Analyze instances of sectoral competition for limited water resources and associated socio-economic stress.\n\n(4)   Understand how long term water management strategies may improve resilience against hydrological droughts and hot extremes.\n\n## Represented processes:\nFigure 1 shows a schematic depiction of the implementation of sectoral water abstractions in the Community Earth System Model. While irrigation and other sectors are represented together, it should be mentioned that irrigation was already implemented in CESM since 2013. You can read more about this in the dedicated page [Irrigation in CTSM](./Irrigation/irrig2013). Nonetheless, in our current implementation, all sectors become connected through the competition for limited water resources provided by the river network.\n\nThe water withdrawals and consumption fluxes are computed daily in the land component of the model, *CTSM*. \n\nFor irrigation, the demand is computed based on soil moisture deficit at the beginning of each day. The water is then supplied from the gridcell river network and applied on surface soil (or differently depending on the used irrigation technique) where it can supply plants with water, but also influence surface water/energy balance. \n\nFor other sectors, instead of deriving the sectoral demand and consumption from predictors (usually based on GDP and population), we prefer to rely on existing [datasets](./Input_Data.md). The water necessary to satisfy the demand is then again provided from the river network (achieved through coupling with the MOSART routing model). Part of the used water is recycled and sent back to the river model, and the other part is considered inefficiently managed and disposed on surface soil over areas with natural vegetation where it contribute to the water/energy surface balance through evaporation, infiltration and runoff.\n\nFinally, a basic sectoral priority algorithm is implemented, with water supplied by order of priority from domestic to irrigation. This way, in situations when water is scarce, sectors will compete for limited resources. The current algorithm may be improved in the future, to allow different strategies of water management under limited resource availability.\n\n![Infographic](/Figures/model_features.PNG)\n\n\n## Source code development:\n- [Changes Tracker CTSM](./CTSM/Changes_Tracker_CTSM.md)\n- [Changes Tracker CMEPS](./CMEPS/Changes_Tracker_CMEPS.md)\n- [Changes Tracker CPL7](./CPL7/Changes_Tracker_CPL7.md)\n- [Changes Tracker MOSART](./MOSART/Changes_Tracker_MOSART.md)\n\n\n\n","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null},"/obsidian/Other-files-to-modify":{"title":"","content":"src/cpl/nuopc/lnd_import_export.F90 (done)\n\nsrc/cpl/lilac/lnd_comp_esmf.F90 (done)\n\nsrc/cpl/lilac/lnd_import_export.F90 (done)\n\nsrc/cpl/mct/clm_cpl_indices.F90 (done)\n\nsrc/cpl/mct/lnd_import_export.F90 (done)\n\ncomponents/cpl7/driver/main/CMakeLists.txt (done)\n\ncime/CIME/non_py/src/components/xcpl_comps_nuopc/xrof/src/rof_comp_nuopc.F90 (done)\n\ncime/CIME/non_py/src/components/xcpl_comps_nuopc/xlnd/src/lnd_comp_nuopc.F90 (done)\n\nThings I tried to correct the bug with NaNs from CLM to the coupler:\n1. Instead of initializing with NaNs or spval, I initialized all fields to 0 in the SectorWater module (didn't work).","lastmodified":"2022-10-19T09:58:28.420416864Z","tags":null}}